DOF Authentication API — Registration Specification (for UI implementation)

Base URL
- http://localhost:3000

Endpoint
- Method: POST
- URL: /api/auth/register
- Auth: Not required
- Headers: Content-Type: application/json

Purpose
- Create a new user and return the created user (without password) plus a JWT token for immediate authenticated use.

Request Body Schema (JSON)
{
  "full_name": string (required, 2–100 chars),
  "username": string (required, 3–30 chars, a–z, A–Z, 0–9, _),
  "password": string (required, min 6 chars),
  "phone": string (optional, 7–20 chars, digits and + - ( ) space),
  "specialist": string (required, 1–100 chars),
  "gender": string (required, enum: "male" | "female"),
  "college": string (optional, 1–100 chars),
  "department": string (required, 1–100 chars),
  "role": string (optional, enum: "employee" | "manager" | "admin", default "employee"),
  "leave_balances": [                         (optional)
    {
      "leave_type_id": string (required if item provided),
      "available_days": integer (required if item provided, >= 0),
      "one_time_used": boolean (optional, default false)
    }
  ]
}

Validation Rules (frontend should enforce where possible)
- full_name: trim; length 2–100
- username: trim; length 3–30; regex ^[a-zA-Z0-9_]+$; unique (server enforces uniqueness)
- password: min length 6
- phone (optional): regex ^[0-9+\-()\s]{7,20}$
- specialist (required): length 1–100
  - gender (required): must be either male or female
  - college (optional): length 1–100
  - department (required): length 1–100
- role (optional): must be one of employee, manager, admin; case-insensitive in UI, but send lowercase
- leave_balances (optional): array; each item must include leave_type_id (string) and available_days (int >= 0); one_time_used defaults to false

Defaults & Server Behavior
- role defaults to "employee" if not provided
- user_id is generated on the server (unique string)
- Password is hashed server-side
- On success, server returns a JWT token valid for 7 days
- Duplicate username returns 409 Conflict

Successful Response (201)
{
  "success": true,
  "message": "User registered successfully",
  "data": {
    "user": {
      "_id": string,
      "user_id": string,
      "username": string,
      "full_name": string,
      "phone": string | undefined,
      "college": string | undefined,
      "department": string | undefined,
      "role": "employee" | "manager" | "admin",
      "leave_balances": [
        { "leave_type_id": string, "available_days": number, "one_time_used": boolean, "_id": string }
      ],
      "createdAt": ISO string,
      "updatedAt": ISO string,
      "__v": number
    },
    "token": string (JWT)
  }
}

Validation Error Response (400)
{
  "success": false,
  "message": "Validation failed",
  "errors": [
    { "field": string, "message": string }
  ]
}

Duplicate Username Response (409)
{
  "success": false,
  "message": "Username already exists"
}

Generic Error (500)
{
  "success": false,
  "message": "Registration failed"
}

Example Request — Minimal
{
  "full_name": "Jane Doe",
  "username": "janedoe",
  "password": "password123"
}

Example Request — Full
{
  "full_name": "Jane Doe",
  "username": "janedoe",
  "password": "password123",
  "phone": "+15551234567",
  "college": "Engineering College",
  "department": "IT",
  "role": "manager",
  "leave_balances": [
    { "leave_type_id": "annual", "available_days": 10, "one_time_used": false }
  ]
}

UI Implementation Notes
- Disable submit until all required fields are valid.
- Send role as lowercase values (employee/manager/admin).
- Show inline validation errors per field based on server response.
s- On success: store token for authenticated flows; navigate to post-signup route as needed.
- Handle 409 specifically to prompt user to pick a different username.
